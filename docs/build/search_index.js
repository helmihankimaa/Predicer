var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"AbstractModel.jl API reference.","category":"page"},{"location":"api/#model.jl","page":"API reference","title":"model.jl","text":"","category":"section"},{"location":"api/#Model","page":"API reference","title":"Model","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Initialize\r\nsolve_model\r\nexport_model_contents\r\nget_result_dataframe\r\nwrite_bid_matrix","category":"page"},{"location":"api/#AbstractModel.Initialize","page":"API reference","title":"AbstractModel.Initialize","text":"Initialize(input_data::OrderedDict)\n\nFunction to initialize the model based on given input data. This function calls functions initializing the solver, model, etc. \n\nArguments\n\ninput_data::OrderedDict: Dictionary containing data used to build the model. \n\nExamples\n\njulia> model_contents = Initialize(input_data);\nOrderedDict{Any, Any} with 8 entries:\n  \"constraint\"     => ...\n  \"expression\"     => ...\n  \"variable\"       => ...\n  \"tuple\"          => ...\n  \"gen_constraint\" => ...\n  \"gen_expression\" => ...\n  \"res_dir\"        => ...\n  \"model\"          => ...\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.solve_model","page":"API reference","title":"AbstractModel.solve_model","text":"solve_model(model_contents::OrderedDict)\n\nFunction to use the optimizer to solve model. \n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.export_model_contents","page":"API reference","title":"AbstractModel.export_model_contents","text":"export_model_contents(model_contents::OrderedDict, results::Bool)\n\nSaves the contents of the model dict to an excel file.\n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.get_result_dataframe","page":"API reference","title":"AbstractModel.get_result_dataframe","text":"get_result_dataframe(model_contents,type=\"\",process=\"\",node=\"\",scenario=\"\")\n\nReturns a dataframe containing specific information from the model?\n\nArguments\n\nmodel_contents::OrderedDict: ?\ntype: ?\nprocess: ?\nnode: ?\nscenario: ?\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.write_bid_matrix","page":"API reference","title":"AbstractModel.write_bid_matrix","text":"write_bid_matrix(model_contents::OrderedDict, input_data::OrderedDict)\n\nReturns the bid matric generated by the model?\n\n\n\n\n\n","category":"function"},{"location":"api/#constraints.jl","page":"API reference","title":"constraints.jl","text":"","category":"section"},{"location":"api/#Constraints","page":"API reference","title":"Constraints","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"create_constraints\r\nsetup_node_balance\r\nsetup_process_online_balance\r\nsetup_process_balance\r\nsetup_processes_limits\r\nsetup_reserve_balances\r\nsetup_ramp_constraints\r\nsetup_fixed_values\r\nsetup_bidding_constraints\r\nsetup_generic_constraints\r\nsetup_cost_calculations\r\nsetup_objective_function","category":"page"},{"location":"api/#AbstractModel.create_constraints","page":"API reference","title":"AbstractModel.create_constraints","text":"create_constraints(model_contents::OrderedDict, input_data::OrderedDict)\n\nCreate all constraints used in the model.\n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \ninput_data::OrderedDict: Dictionary containing data used to build the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.setup_node_balance","page":"API reference","title":"AbstractModel.setup_node_balance","text":"setup_node_balance(model_contents::OrderedDict, input_data::OrderedDict)\n\nSetup node balance constraints used in the model.\n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \ninput_data::OrderedDict: Dictionary containing data used to build the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.setup_process_online_balance","page":"API reference","title":"AbstractModel.setup_process_online_balance","text":"setup_process_online_balance(model_contents::OrderedDict, input_data::OrderedDict)\n\nSetup necessary functionalities for processes with binary online variables.\n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \ninput_data::OrderedDict: Dictionary containing data used to build the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.setup_process_balance","page":"API reference","title":"AbstractModel.setup_process_balance","text":"setup_process_balance(model_contents::OrderedDict, input_data::OrderedDict)\n\nSetup constraints used in process balance calculations. \n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \ninput_data::OrderedDict: Dictionary containing data used to build the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.setup_processes_limits","page":"API reference","title":"AbstractModel.setup_processes_limits","text":"setup_processes_limits(model_contents::OrderedDict, input_data::OrderedDict)\n\nSetup constraints used for process limitations, such as min/max loads, unit starts and participation in reserves.\n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \ninput_data::OrderedDict: Dictionary containing data used to build the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.setup_reserve_balances","page":"API reference","title":"AbstractModel.setup_reserve_balances","text":"setup_reserve_balances(model_contents::OrderedDict, input_data::OrderedDict)\n\nSetup constraints for reserves. \n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \ninput_data::OrderedDict: Dictionary containing data used to build the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.setup_ramp_constraints","page":"API reference","title":"AbstractModel.setup_ramp_constraints","text":"setup_ramp_constraints(model_contents::OrderedDict, input_data::OrderedDict)\n\nSetup process ramp constraints, based on ramp limits defined in input data and participation in reserves.  \n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \ninput_data::OrderedDict: Dictionary containing data used to build the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.setup_fixed_values","page":"API reference","title":"AbstractModel.setup_fixed_values","text":"setup_fixed_values(model_contents::OrderedDict, input_data::OrderedDict)\n\nSetup constraints for setting fixed process values at certain timesteps.   \n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \ninput_data::OrderedDict: Dictionary containing data used to build the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.setup_bidding_constraints","page":"API reference","title":"AbstractModel.setup_bidding_constraints","text":"setup_bidding_constraints(model_contents::OrderedDict, input_data::OrderedDict)\n\nSetup constraints for market bidding.   \n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \ninput_data::OrderedDict: Dictionary containing data used to build the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.setup_generic_constraints","page":"API reference","title":"AbstractModel.setup_generic_constraints","text":"setup_generic_constraints(model_contents::OrderedDict, input_data::OrderedDict)\n\nSetup generic constraints. \n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \ninput_data::OrderedDict: Dictionary containing data used to build the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.setup_cost_calculations","page":"API reference","title":"AbstractModel.setup_cost_calculations","text":"setup_cost_calculations(model_contents::OrderedDict, input_data::OrderedDict)\n\nSetup expressions used for calculating the costs in the model. \n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \ninput_data::OrderedDict: Dictionary containing data used to build the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.setup_objective_function","page":"API reference","title":"AbstractModel.setup_objective_function","text":"setup_objective_function(model_contents::OrderedDict, input_data::OrderedDict)\n\nSets up the objective function, which in this model aims to minimize the costs.\n\n\n\n\n\n","category":"function"},{"location":"api/#tuples.jl","page":"API reference","title":"tuples.jl","text":"","category":"section"},{"location":"api/#Tuples","page":"API reference","title":"Tuples","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Indexing of constraints, expressions and variables in this model is done using tuples. The tuples contain strings, such as (\"dh\", \"s1\", \"t1\"). ","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"n = node","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"p = process","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"s = scenario","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"t = timestep","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"so = process source","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"si = process sink","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"res = reserve market","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"rd = reserve direction (up, down, or up/down)","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"rt = reserve type","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"create_tuples\r\ncreate_res_nodes_tuple\r\ncreate_res_tuple\r\ncreate_process_tuple\r\ncreate_res_potential_tuple\r\ncreate_proc_online_tuple\r\ncreate_res_pot_prod_tuple\r\ncreate_res_pot_cons_tuple\r\ncreate_node_state_tuple\r\ncreate_node_balance_tuple\r\ncreate_proc_potential_tuple\r\ncreate_proc_balance_tuple\r\ncreate_proc_op_balance_tuple\r\ncreate_proc_op_tuple\r\ncreate_cf_balance_tuple\r\ncreate_lim_tuple\r\ncreate_trans_tuple\r\ncreate_res_eq_tuple\r\ncreate_res_eq_updn_tuple\r\ncreate_res_final_tuple\r\ncreate_fixed_value_tuple\r\ncreate_ramp_tuple","category":"page"},{"location":"api/#AbstractModel.create_tuples","page":"API reference","title":"AbstractModel.create_tuples","text":"create_tuples(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreate all tuples used in the model, and save them in the model_contents dict.\n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \ninput_data::OrderedDict: Dictionary containing data used to build the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_res_nodes_tuple","page":"API reference","title":"AbstractModel.create_res_nodes_tuple","text":"create_res_nodes_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates the tuple containing all the nodes which have a reserve. Form: (node).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_res_tuple","page":"API reference","title":"AbstractModel.create_res_tuple","text":"create_res_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates the reserve tuple. Form: (res, n, rd, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_process_tuple","page":"API reference","title":"AbstractModel.create_process_tuple","text":"create_process_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple containing process topology for each timestep. Form: (p, so, si, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_res_potential_tuple","page":"API reference","title":"AbstractModel.create_res_potential_tuple","text":"create_res_potential_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple containing information on reserve participation in each timestep. Form: (rd, rt, p, so, si, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_proc_online_tuple","page":"API reference","title":"AbstractModel.create_proc_online_tuple","text":"create_proc_online_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple containing processes with online variables for each timestep. Form: (p, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_res_pot_prod_tuple","page":"API reference","title":"AbstractModel.create_res_pot_prod_tuple","text":"create_res_pot_prod_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple containing information on potential reserve participation per unit for each timestep. Form: (rd, rt, p, so, si, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_res_pot_cons_tuple","page":"API reference","title":"AbstractModel.create_res_pot_cons_tuple","text":"create_res_pot_cons_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple containing information on potential reserve participation per unit for each timestep. Form: (rd, rt, p, so, si, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_node_state_tuple","page":"API reference","title":"AbstractModel.create_node_state_tuple","text":"create_node_state_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple containing each node with a state (reserve) for each timestep. Form: (n, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_node_balance_tuple","page":"API reference","title":"AbstractModel.create_node_balance_tuple","text":"create_node_balance_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple containing nodes over which balance should be calculated. Form: (n s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_proc_potential_tuple","page":"API reference","title":"AbstractModel.create_proc_potential_tuple","text":"create_proc_potential_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple containing information on potential reserve participation per unit for each timestep. Form: (rd, rt, p, so, si, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_proc_balance_tuple","page":"API reference","title":"AbstractModel.create_proc_balance_tuple","text":"create_proc_balance_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple containing all processes, over which balance is to be calculated, for each timestep. Form: (p, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_proc_op_balance_tuple","page":"API reference","title":"AbstractModel.create_proc_op_balance_tuple","text":"create_proc_op_balance_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple containing all processes with piecewise efficiency, for each timestep and each operating point. Form: (p, s, t, operating_point).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_proc_op_tuple","page":"API reference","title":"AbstractModel.create_proc_op_tuple","text":"create_proc_op_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple containing all processes with piecewise efficiency, for each timestep. Form: (p, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_cf_balance_tuple","page":"API reference","title":"AbstractModel.create_cf_balance_tuple","text":"create_cf_balance_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple containing information on processes with an capacity factor, for each timestep. Form: (p, so, si, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_lim_tuple","page":"API reference","title":"AbstractModel.create_lim_tuple","text":"create_lim_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple ?. Form: (p, so, si, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_trans_tuple","page":"API reference","title":"AbstractModel.create_trans_tuple","text":"create_trans_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple containing information on transport processes, for each timestep. Form: (p, so, si, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_res_eq_tuple","page":"API reference","title":"AbstractModel.create_res_eq_tuple","text":"create_res_eq_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple with each node with reserves, for relevant reserve type and each timestep. Form: (n, rt, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_res_eq_updn_tuple","page":"API reference","title":"AbstractModel.create_res_eq_updn_tuple","text":"create_res_eq_updn_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple containing all (reserve) markets with an (up/down) direction. Form: (m, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_res_final_tuple","page":"API reference","title":"AbstractModel.create_res_final_tuple","text":"create_res_final_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple containing all (reserve) markets for each timestep. Form: (m, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_fixed_value_tuple","page":"API reference","title":"AbstractModel.create_fixed_value_tuple","text":"create_fixed_value_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple containing timesteps containing fixed market states. Form: (m, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_ramp_tuple","page":"API reference","title":"AbstractModel.create_ramp_tuple","text":"create_ramp_tuple(model_contents::OrderedDict, input_data::OrderedDict::OrderedDict)\n\nCreates tuple containing timesteps with ramp possibility. Form: (p, so, si, s, t).\n\n\n\n\n\n","category":"function"},{"location":"api/#variables.jl","page":"API reference","title":"variables.jl","text":"","category":"section"},{"location":"api/#Variables","page":"API reference","title":"Variables","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"create_variables\r\ncreate_v_flow\r\ncreate_v_online\r\ncreate_v_reserve\r\ncreate_v_state\r\ncreate_v_flow_op","category":"page"},{"location":"api/#AbstractModel.create_variables","page":"API reference","title":"AbstractModel.create_variables","text":"create_variables(model_contents::OrderedDict)\n\nCreate the variables used in the model, and save them in the model_contents dict.\n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_v_flow","page":"API reference","title":"AbstractModel.create_v_flow","text":"create_v_flow(model_contents::OrderedDict)\n\nSets up v_flow, which is the variable symbolising flows between nodes/processes.\n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_v_online","page":"API reference","title":"AbstractModel.create_v_online","text":"create_v_online(model_contents::OrderedDict)\n\nSets up variables used for modelling functionality for processes with binary online variables, as well as starts/stops.\n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_v_reserve","page":"API reference","title":"AbstractModel.create_v_reserve","text":"create_v_reserve(model_contents::OrderedDict)\n\nSets up the variables used for modelling reserves.\n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_v_state","page":"API reference","title":"AbstractModel.create_v_state","text":"create_v_state(model_contents::OrderedDict)\n\nSets up variables used for node state (storage) functionality.\n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractModel.create_v_flow_op","page":"API reference","title":"AbstractModel.create_v_flow_op","text":"create_v_flow_op(model_contents::OrderedDict)\n\nSets up variables for processes with piecewise efficiency functionality.\n\nArguments\n\nmodel_contents::OrderedDict: Dictionary containing all data and structures used in the model. \n\n\n\n\n\n","category":"function"},{"location":"api/#structures.jl","page":"API reference","title":"structures.jl","text":"","category":"section"},{"location":"api/#Structures","page":"API reference","title":"Structures","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Node\r\nProcess\r\nTimeSeries\r\nState\r\nMarket\r\nTopology\r\nConFactor\r\nGenConstraint","category":"page"},{"location":"api/#AbstractModel.Node","page":"API reference","title":"AbstractModel.Node","text":"struct Node\n    name::String\n    is_commodity::Bool\n    is_state::Bool\n    is_res::Bool\n    is_inflow::Bool\n    is_market::Bool\n    state::State\n    cost::Vector{TimeSeries}\n    inflow::Vector{TimeSeries}\n    function Node(name, is_commodity, is_state, is_res, is_inflow, is_market, state_max, in_max, out_max, initial_state)\n        return new(name, is_commodity, is_state, is_res, is_inflow, is_market, State(in_max, out_max, initial_state, state_max), [], [])\n    end\nend\n\nA struct for nodes.\n\nFields\n\nname::String: Name of the node. \nis_commodity::Bool: Flag indicating of the node is a commodity.\nis_state::Bool:  Flag indicating of the node has a state (storage).\nis_res::Bool: Flag indicating of the node participates as a reserve.\nis_inflow::Bool: Flag indicating of the node has a inflow. \nis_market::Bool: Flag indicating of the node is a market node.\nstate::State: The state of the node. \ncost::Vector{TimeSeries}: Vector containing TimeSeries with the costs for each scenario. \ninflow::Vector{TimeSeries}: Vector contining TimeSeries with the inflows for each scenario. \n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractModel.Process","page":"API reference","title":"AbstractModel.Process","text":"struct Process\n    name::String\n    is_cf::Bool\n    is_cf_fix::Bool\n    is_online::Bool\n    is_res::Bool\n    eff::Float64\n    conversion::Integer\n    load_min::Float64\n    load_max::Float64\n    start_cost::Float64\n    min_online::Int64\n    min_offline::Int64\n    initial_state::Bool\n    topos::Vector{Topology}\n    cf::Vector{TimeSeries}\n    eff_ts::Vector{TimeSeries}\n    eff_ops::Vector{Any}\n    eff_fun::Vector{Tuple{Any,Any}}\n    function Process(name, is_cf, is_cf_fix, is_online, is_res, eff, conversion, load_min, load_max, start_cost, min_online, min_offline, initial_state)\n        return new(name, is_cf, is_cf_fix, is_online, is_res, eff, conversion, load_min, load_max, start_cost, min_online, min_offline, initial_state, [], [], [], [], [])\n    end\nend\n\nA struct for a process (unit).\n\nFields\n\nname::String: Name of the process.\nis_cf::Bool: Flag indicating if the process is a cf (capacity factor) process, aka depends on a TimeSeries.\nis_cf_fix::Bool: Flag indicating if the cf TimeSeries is a upper limit (false) or a set value (true).\nis_online::Bool: Flag indicating if the process has an binary online variable.\nis_res::Bool: Flag indicating if the process can participate in a reserve.\neff::Float64: Process conversion efficiency.\nconversion::Integer: \nload_min::Float64: Minimum allowed load over the process, min 0, max 1.\nload_max::Float64: Maximum allowed load over the process, min 0, max 1.\nstart_cost::Float64: Cost to start the process, if the 'is_online' flag is true.\nmin_online::Int64: Minimum time the process has to be online after start.\nmin_offline::Int64: Minimum time the process has to be offline after start.\ninitial_state::Bool: Initial state (on/off) of the process at the start of simulation.\ntopos::Vector{Topology}: Vector containing the topologies of the process.\ncf::Vector{TimeSeries}: Vector containing TimeSeries limiting a cf process.\neff_ts::Vector{TimeSeries}: Vector of TimeSeries containing information on efficiency depending on time.\neff_ops::Vector{Any}: Vector containing operating points for a piecewise efficiency function.\neff_fun::Vector{Tuple{Any,Any}}: Vector containing efficiencies for a piecewise efficiency function.\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractModel.TimeSeries","page":"API reference","title":"AbstractModel.TimeSeries","text":"mutable struct TimeSeries\n    scenario::Any\n    series::Vector{Tuple{Any, Any}}\n    function TimeSeries(scenario=\"\", series=0)\n        if series != 0\n            return new(scenario, series)\n        else\n            return new(scenario, [])\n        end\n    end\nend\n\nA struct for time series. Includes linked scenario and a vector containing tuples of time and value.\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractModel.State","page":"API reference","title":"AbstractModel.State","text":"struct State\n    in_max::Float64\n    out_max::Float64\n    state_max::Float64\n    state_min::Float64\n    initial_state::Float64\n    state_loss::Float64\n    function State(in_max, out_max, initial_state, state_max, state_loss, state_min=0)\n        return new(in_max, out_max, state_max, state_min, initial_state, state_loss)\n    end\nend\n\nA struct for node states (storage), holds information on the parameters of the state.\n\nFields\n\nin_max::Float64: Value for maximum increase of state variable value between timesteps. \nout_max::Float64: Value for maximum decrease of state variable value between timesteps. \nstate_max::Float64: Maximum value for state variable. \nstate_min::Float64: Minimum value for state variable. \ninitial_state::Float64: Initial value of the state variable at t = 0.\nstate_loss: Losses over time in the state. \n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractModel.Market","page":"API reference","title":"AbstractModel.Market","text":"struct Market\n    name::String\n    type::String\n    node::Any\n    direction::String\n    realisation::Float64\n    reserve_type::String\n    price::Vector{TimeSeries}\n    fixed::Vector{Tuple{Any,Any}}\n    function Market(name, type, node, direction, realisation, reserve_type)\n        return new(name, type, node, direction, realisation, reserve_type, [], [])\n    end\nend\n\nA struct for markets.\n\nFields\n\nname::String: Name of the market. \ntype::String: Type of the market (energy/reserve).\nnode::Any: Name of the node this market is connected to.\ndirection::String: Direction of the market (up/down/updown).\nrealisation::Float64: Realisation probability.\nreserve_type::String: Type of the reserve market. \nprice::Vector{TimeSeries}: Vector containing TimeSeries of the market price in different scenarios. \nfixed::Vector{Tuple{Any,Any}}: Vector containing information on the market being fixed. \n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractModel.Topology","page":"API reference","title":"AbstractModel.Topology","text":"struct Topology\n    source::String\n    sink::String\n    capacity::Float64\n    VOM_cost::Float64\n    ramp_up::Float64\n    ramp_down::Float64\n    function Topology(source, sink, capacity, VOM_cost, ramp_up, ramp_down)\n        return new(source, sink, capacity, VOM_cost, ramp_up, ramp_down)\n    end\nend\n\nA struct for a process topology, signifying the connection between flows in a process. \n\nFields\n\nsource::String: Name of the source of the topology.\nsink::String: Name of the sink of the topology.\ncapacity::Float64: Upper limit of the flow variable for the topology. \nVOM_cost::Float64: VOM cost of using this connection. \nramp_up::Float64: Maximum allowed increase of the linked flow variable value between timesteps. \nramp_down::Float64: Minimum allowed increase of the linked flow variable value between timesteps. \n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractModel.ConFactor","page":"API reference","title":"AbstractModel.ConFactor","text":"struct ConFactor\n    flow::Tuple{Any,Any}\n    data::Vector{TimeSeries}\n    function ConFactor(flow,data)\n        return new(flow,data)\n    end\nend\n\nStruct for general constraints factors.\n\nFields\n\nflow::Tuple{Any,Any}: ??\ndata::Vector{TimeSeries}: ??    \n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractModel.GenConstraint","page":"API reference","title":"AbstractModel.GenConstraint","text":"struct GenConstraint\n    name::String\n    type::String\n    factors::Vector{ConFactor}\n    constant::Vector{TimeSeries}\n    function GenConstraint(name,type)\n        return new(name,type,[],[])\n    end\nend\n\nStruct for general constraints.\n\nFields\n\nname::String: Name of the generic constraint. \ntype::String: Type of the generic constraint. \nfactors::Vector{ConFactor}: Vector of ConFactors. \nconstant::Vector{TimeSeries}: TimeSeries?\n\n\n\n\n\n","category":"type"}]
}
